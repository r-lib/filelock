[{"path":[]},{"path":"https://r-lib.github.io/filelock/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://r-lib.github.io/filelock/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://r-lib.github.io/filelock/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://r-lib.github.io/filelock/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://r-lib.github.io/filelock/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://r-lib.github.io/filelock/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://r-lib.github.io/filelock/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://r-lib.github.io/filelock/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://r-lib.github.io/filelock/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://r-lib.github.io/filelock/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://r-lib.github.io/filelock/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://r-lib.github.io/filelock/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 filelock authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://r-lib.github.io/filelock/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gábor Csárdi. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://r-lib.github.io/filelock/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Csárdi G (2024). filelock: Portable File Locking. R package version 1.0.3.9000, https://github.com/r-lib/filelock, https://r-lib.github.io/filelock/.","code":"@Manual{,   title = {filelock: Portable File Locking},   author = {Gábor Csárdi},   year = {2024},   note = {R package version 1.0.3.9000, https://github.com/r-lib/filelock},   url = {https://r-lib.github.io/filelock/}, }"},{"path":"https://r-lib.github.io/filelock/dev/index.html","id":"filelock","dir":"","previous_headings":"","what":"Portable File Locking","title":"Portable File Locking","text":"Portable File Locking Place exclusive shared lock file. uses LockFile Windows fcntl locks Unix-like systems.","code":""},{"path":"https://r-lib.github.io/filelock/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Portable File Locking","text":"Install package CRAN usual: Install development version GitHub:","code":"install.packages(\"filelock\") pak::pak(\"r-lib/filelock\")"},{"path":"https://r-lib.github.io/filelock/dev/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Portable File Locking","text":"R process 1, gets exclusive lock. want lock file myfile, always create separate lock file instead placing lock file directly! R process 2, fails acquire lock. Specifying timeout interval, giving : Wait indefinetely: R process 1 released lock (terminated), R process 2 can acquire lock:","code":"library(filelock) R1> lck <- lock(\"/tmp/myfile.lck\") R2> lock(\"/tmp/myfile.lck\", timeout = 0) R2> lock(\"/tmp/myfile.lck\", timeout = 5000) R2> lock(\"/tmp/myfile.lck\", timeout = Inf) R1> unlock(lck) R2> lock(\"/tmp/myfile.lck\") #> Lock on ‘/tmp/myfile.lck’"},{"path":[]},{"path":"https://r-lib.github.io/filelock/dev/index.html","id":"warning","dir":"","previous_headings":"Documentation","what":"Warning","title":"Portable File Locking","text":"Always use special files locking. .e. want restict access certain file, place lock file. Create special file, e.g. appending .lock original file name place lock . (lock() function creates file , actually, exist.) Reading writing locked file undefined behavior! (See Internals Section.) hard determine whether safe remove special files, current recommendation just leave around. best leave special lock file empty, simply OSes write (read ), lock place.","code":""},{"path":"https://r-lib.github.io/filelock/dev/index.html","id":"advisory-locks","dir":"","previous_headings":"Documentation","what":"Advisory Locks:","title":"Portable File Locking","text":"locks set package might advisory. process respect locking machanism may able read write locked file, even remove (assuming capabilities ).","code":""},{"path":"https://r-lib.github.io/filelock/dev/index.html","id":"unlock-on-termination","dir":"","previous_headings":"Documentation","what":"Unlock on Termination:","title":"Portable File Locking","text":"process terminates (normal exit, crash signal), lock(s) holding automatically released. R object represents lock (return value lock) goes scope, lock released automatically soon object garbage collected. safety mechanism, user still unlock() locks manually, maybe using base::.exit(), lock released case errors well, soon possible.","code":""},{"path":"https://r-lib.github.io/filelock/dev/index.html","id":"special-file-systems","dir":"","previous_headings":"Documentation","what":"Special File Systems:","title":"Portable File Locking","text":"File locking needs support file system, non-standard file systems support . example network file systems like NFS CIFS, user mode file systems like sshfs ftpfs, etc., support might vary. Recent Linux versions recent NFS versions (version 3) support file locking, enabled. theory possible simply test lock support, using two child processes timeout, filelock currently.","code":""},{"path":"https://r-lib.github.io/filelock/dev/index.html","id":"locking-part-of-a-file","dir":"","previous_headings":"Documentation","what":"Locking Part of a File:","title":"Portable File Locking","text":"possible general, filelock suport currently. main purpose filelock lock using special lock files, locking part really useful.","code":""},{"path":"https://r-lib.github.io/filelock/dev/index.html","id":"internals-on-unix","dir":"","previous_headings":"Documentation","what":"Internals on Unix:","title":"Portable File Locking","text":"Unix (.e. Linux, macOS, etc.), use fcntl acquire release locks. can read : https://www.gnu.org/software/libc/manual/html_node/File-Locks.html important points: lock put file descriptor, kept open, lock released. process can one kind lock set given file. file descriptor file closed process, locks process holds file released, even locks made using descriptors remain open. Note R, using one-shot function call modify file opens closes file descriptor , lock released. (one main reasons using special lock files, instead putting lock actual file.) Locks inherited child processes created using fork. lock requests finite timeout intervals, set alarm, temporarily install signal handler . R single threaded, code can running, process waiting acquire lock. signal handler restored original value immediately lock acquired timeout expires. (actually restored signal handler, race conditions . However, multiple SIGALRM signals delivered via single call signal handler, alarms might get lost. Currently base R use SIGALRM signal anything, packages might.)","code":""},{"path":"https://r-lib.github.io/filelock/dev/index.html","id":"internals-on-windows","dir":"","previous_headings":"Documentation","what":"Internals on Windows:","title":"Portable File Locking","text":"Windows, LockFileEx used create lock file. finite timeout specified lock request, asynchronous (overlapped) /O used wait locking event timeout. See LockFileEx first hit : https://msdn.microsoft.com/en-us/library/aa365203.aspx important points: LockFileEx locks mandatory (opposed advisory), indeed processes access locked file. Actually, even locking process access different file handle, one used locking. general, R read locked file, write . (Although, current R version fail, just nothing, quite puzzling.) Remember, always use special lock file, instead putting lock main file, affected problems. Inherited handles provide access child process.","code":""},{"path":"https://r-lib.github.io/filelock/dev/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Portable File Locking","text":"Please note fs project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://r-lib.github.io/filelock/dev/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Portable File Locking","text":"MIT © RStudio","code":""},{"path":"https://r-lib.github.io/filelock/dev/reference/filelock-package.html","id":null,"dir":"Reference","previous_headings":"","what":"filelock: Portable File Locking — filelock-package","title":"filelock: Portable File Locking — filelock-package","text":"Place exclusive shared lock file. uses 'LockFile' Windows 'fcntl' locks Unix-like systems.","code":""},{"path":[]},{"path":"https://r-lib.github.io/filelock/dev/reference/filelock-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"filelock: Portable File Locking — filelock-package","text":"Maintainer: Gábor Csárdi csardi.gabor@gmail.com contributors: Posit Software, PBC [copyright holder, funder]","code":""},{"path":"https://r-lib.github.io/filelock/dev/reference/lock.html","id":null,"dir":"Reference","previous_headings":"","what":"Advisory File Locking and Unlocking — lock","title":"Advisory File Locking and Unlocking — lock","text":"two kinds locks, exclusive shared, see exclusive argument details .","code":""},{"path":"https://r-lib.github.io/filelock/dev/reference/lock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Advisory File Locking and Unlocking — lock","text":"","code":"lock(path, exclusive = TRUE, timeout = Inf)  unlock(lock)"},{"path":"https://r-lib.github.io/filelock/dev/reference/lock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Advisory File Locking and Unlocking — lock","text":"path Path file lock. file exist, created, directory file must exist. place lock file want read write ! *Always use special lock file. See details . exclusive Whether acquire exclusive lock. exclusive lock gives process exclusive access file, processes can place kind lock . non-exclusive lock shared lock. Multiple processes can hold shared lock file. process writes file typically requests exclusive lock, process reads typically requests shared lock. timeout Timeout acquire lock milliseconds. Inf, process wait indefinitely acquire lock. zero, function returns immediately, without acquiring lock lock lock object unlock. error try unlock already unlocked lock. possible lock unlocked lock , new lock requested.","code":""},{"path":"https://r-lib.github.io/filelock/dev/reference/lock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Advisory File Locking and Unlocking — lock","text":"lock returns filelock_lock object lock successfully acquired, NULL timeout happened. unlock returns TRUE, always.","code":""},{"path":"https://r-lib.github.io/filelock/dev/reference/lock.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Advisory File Locking and Unlocking — lock","text":"Always use special files locking. .e. want restrict access certain file, place lock file. Create special file, e.g. appending .lock original file name place lock . (lock() function creates file , actually, exist.) Reading writing locked file undefined behavior! (See Internals Section.) hard determine whether safe remove special files, current recommendation just leave around. best leave special lock file empty, simply OSes write (read ), lock place.","code":""},{"path":"https://r-lib.github.io/filelock/dev/reference/lock.html","id":"advisory-locks","dir":"Reference","previous_headings":"","what":"Advisory Locks","title":"Advisory File Locking and Unlocking — lock","text":"locks set package might advisory. process respect locking mechanism may able read write locked file, even remove (assuming capabilities ).","code":""},{"path":"https://r-lib.github.io/filelock/dev/reference/lock.html","id":"unlock-on-termination","dir":"Reference","previous_headings":"","what":"Unlock on Termination","title":"Advisory File Locking and Unlocking — lock","text":"process terminates (normal exit, crash signal), lock(s) holding automatically released. R object represents lock (return value lock) goes scope, lock released automatically soon object garbage collected. safety mechanism, user still unlock() locks manually, maybe using base::.exit(), lock released case errors well, soon possible.","code":""},{"path":"https://r-lib.github.io/filelock/dev/reference/lock.html","id":"special-file-systems","dir":"Reference","previous_headings":"","what":"Special File Systems","title":"Advisory File Locking and Unlocking — lock","text":"File locking needs support file system, non-standard file systems support . example network file systems like NFS CIFS, user mode file systems like sshfs ftpfs, etc., support might vary. Recent Linux versions recent NFS versions (version 3) support file locking, enabled. theory possible simply test lock support, using two child processes timeout, filelock currently.","code":""},{"path":"https://r-lib.github.io/filelock/dev/reference/lock.html","id":"locking-part-of-a-file","dir":"Reference","previous_headings":"","what":"Locking Part of a File","title":"Advisory File Locking and Unlocking — lock","text":"possible general, filelock support currently. main purpose filelock lock using special lock files, locking part really useful.","code":""},{"path":"https://r-lib.github.io/filelock/dev/reference/lock.html","id":"internals-on-unix","dir":"Reference","previous_headings":"","what":"Internals on Unix","title":"Advisory File Locking and Unlocking — lock","text":"Unix (.e. Linux, macOS, etc.), use fcntl acquire release locks. can read : https://www.gnu.org/software/libc/manual/html_node/File-Locks.html important points: lock put file descriptor, kept open, lock released. process can one kind lock set given file. file descriptor file closed process, locks process holds file released, even locks made using descriptors remain open. Note R, using one-shot function call modify file opens closes file descriptor , lock released. (one main reasons using special lock files, instead putting lock actual file.) Locks inherited child processes created using fork. lock requests finite timeout intervals, set alarm, temporarily install signal handler . R single threaded, code can running, process waiting acquire lock. signal handler restored original value immediately lock acquired timeout expires. (actually restored signal handler, race conditions . However, multiple SIGALRM signals delivered via single call signal handler, alarms might get lost. Currently base R use SIGALRM signal anything, packages might.)","code":""},{"path":"https://r-lib.github.io/filelock/dev/reference/lock.html","id":"internals-on-windows","dir":"Reference","previous_headings":"","what":"Internals on Windows","title":"Advisory File Locking and Unlocking — lock","text":"Windows, LockFileEx used create lock file. finite timeout specified lock request, asynchronous (overlapped) /O used wait locking event timeout. See LockFileEx first hit : https://www.google.com/search?q=LockFileEx important points: LockFileEx locks mandatory (opposed advisory), indeed processes access locked file. Actually, even locking process access different file handle, one used locking. general, R read locked file, write . (Although, current R version fail, just nothing, quite puzzling.) Remember, always use special lock file, instead putting lock main file, affected problems. Inherited handles provide access child process.","code":""},{"path":"https://r-lib.github.io/filelock/dev/reference/lock.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Advisory File Locking and Unlocking — lock","text":"","code":"## ------------------------------------------------------------- ## R process 1 gets an exclusive lock ## Warning: if you want to lock file 'myfile', always create a ## separate lock file instead of placing the lock on this file directly! lck <- lock(mylockfile)  ## ------------------------------------------------------------- ## R process 2 fails to acquire a lock lock(mylockfile, timeout = 0)  ## Let's wait for 5 seconds, before giving up lock(mylockfile, timeout = 5000)  ## Wait indefinetely lock(mylockfile, timeout = Inf)"},{"path":[]},{"path":"https://r-lib.github.io/filelock/dev/news/index.html","id":"filelock-103","dir":"Changelog","previous_headings":"","what":"filelock 1.0.3","title":"filelock 1.0.3","text":"CRAN release: 2023-12-11 user visible changes.","code":""},{"path":"https://r-lib.github.io/filelock/dev/news/index.html","id":"filelock-102","dir":"Changelog","previous_headings":"","what":"filelock 1.0.2","title":"filelock 1.0.2","text":"CRAN release: 2018-10-05 lock() now removes timer Unix, avoid undefined behavior non-interactive R sessions, SIGALRM delivered process acquired lock.","code":""},{"path":"https://r-lib.github.io/filelock/dev/news/index.html","id":"filelock-101","dir":"Changelog","previous_headings":"","what":"filelock 1.0.1","title":"filelock 1.0.1","text":"CRAN release: 2018-02-07 First public release.","code":""}]
